{"version":3,"sources":["components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","vote","title","poster_path","overview","vote_average","className","src","alt","App","useState","movies","setMovies","searchTerm","setSearchTerm","useEffect","getMovies","API","fetch","then","res","json","data","results","class","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","map","movie","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wJA8BiBA,EAhBH,SAAC,GAAD,IAVQC,EAUNC,EAAF,EAAEA,MAAOC,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,SAAUC,EAAhC,EAAgCA,aAAhC,OACV,yBAAKC,UAAU,SACX,yBAAKC,IAAKJ,EAdF,mCAc2BA,EAAe,yIAA0IK,IAAKN,IACjM,yBAAKI,UAAU,cACX,4BAAKJ,GACL,0BAAMI,UAAS,eAfLL,EAe2BI,EAdzCJ,GAAQ,EACD,QACAA,GAAQ,EACR,SAEA,SASoDI,IAG3D,yBAAKC,UAAU,cACX,yCACA,2BAAIF,MC8BDK,MA7Cf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,KAIbC,qBAAU,WACRC,EATU,yHAUT,IAEH,IAAMA,EAAY,SAACC,GACjBC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLV,EAAUU,EAAKC,aAgBrB,OACE,yBAAKjB,UAAU,OACb,4BAAQkB,MAAM,WACZ,8CACA,0BAAMC,SAhBS,SAACC,GACpBA,EAAEC,iBACCd,IACDG,EArBS,4FAqBQH,GACjBC,EAAc,OAaV,2BAAOc,KAAK,OAAOtB,UAAU,SAASuB,YAAY,YAAYC,MAAOjB,EAAYkB,SATlE,SAACL,GACtBZ,EAAcY,EAAEM,OAAOF,WAUnB,yBAAKxB,UAAU,mBACXK,EAAOsB,KAAI,SAACC,GAAD,OACX,kBAAC,EAAD,eAAOC,IAAKD,EAAME,IAAQF,WClClBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.065f2185.chunk.js","sourcesContent":["import React from 'react';\n\nconst IMGPATH = \"https://image.tmdb.org/t/p/w1280\";\n\nconst setVoteClass = (vote) => {\n    if (vote >= 8) {\n        return \"green\";\n    } else if (vote >= 6) {\n        return \"orange\";\n    } else {\n        return \"red\";\n    }\n}\n\nconst Movie = ({title, poster_path, overview, vote_average}) => (\n    <div className=\"movie\">\n        <img src={poster_path ? (IMGPATH + poster_path) : \"https://images.unsplash.com/photo-1584824486509-112e4181ff6b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1650&q=80\"} alt={title}></img>\n        <div className=\"movie-info\">\n            <h3>{title}</h3>\n            <span className={`tag ${setVoteClass(vote_average)}`}>{vote_average}</span>\n        </div>\n\n        <div className=\"movie-over\">\n            <h2>Overview:</h2>\n            <p>{overview}</p>\n        </div>\n    </div>\n\n)\n  \n  export default Movie;\n  ","import React, { useEffect, useState } from 'react';\nimport Movie from './components/Movie'\n\nconst OMDB_API=\"http://www.omdbapi.com/?i=tt3896198&apikey=1c346896\"\nconst APIKEY =  '04c35731a5ee918f014970082a0088b1'\nconst APIURL =\"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=04c35731a5ee918f014970082a0088b1&page=1\";\nconst IMGPATH = \"https://image.tmdb.org/t/p/w1280\";\nconst SEARCH = \"https://api.themoviedb.org/3/search/movie?api_key=04c35731a5ee918f014970082a0088b1&query=\"\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    getMovies(APIURL)\n  }, []);\n\n  const getMovies = (API) => {\n    fetch(API)\n      .then((res) => res.json())\n      .then((data) => {\n        setMovies(data.results);\n      });\n  }\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(searchTerm) {\n      getMovies(SEARCH+searchTerm)\n      setSearchTerm('');\n    }\n  }\n\n  const handleOnChange = (e) => {\n    setSearchTerm(e.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <header class='navebar'>\n        <h1>Movie Database</h1>\n        <form onSubmit={handleSubmit}>\n          <input type=\"text\" className=\"search\" placeholder=\"Search...\" value={searchTerm} onChange={handleOnChange}/>\n        </form>\n        <div className='movie-container'>\n          { movies.map((movie) => \n            <Movie key={movie.id} {...movie} />\n          )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}